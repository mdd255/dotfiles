{
   "$or": {
      "prefix": ["or"],
      "body": "|| "
   },
   "$and": {
      "prefix": ["an"],
      "body": "&& "
   },
   "import_module": {
      "prefix": ["rem"],
      "body": "import $1 from '$1'"
   },
   "import_partial": {
      "prefix": ["rep"],
      "body": "import { $2 } from '$1'"
   },
   "function": {
      "prefix": ["fn"],
      "body": [
         "function $1(): $2 {",
         "\t$3",
         "}"
      ]
   },
   "async_function": {
      "prefix": ["afn"],
      "body": [
         "async function $1(): $2 {",
         "\t$3",
         "}"
      ]
   },
   "arrow_function_compact": {
      "prefix": ["af"],
      "body": [
         "($1): $2 => $3"
      ]
   },
   "arrow_function_full": {
      "prefix": ["aff"],
      "body": [
         "($1): $2 => {",
         "\t$3",
         "}"
      ]
   },
   "console.log": {
      "prefix": ["cl"],
      "body": "console.log($1)"
   },
   "console.log_object": {
      "prefix": ["co"],
      "body": "console.log({ $1 })"
   },
   "JSON.stringify": {
      "prefix": ["js"],
      "body": "JSON.stringify($1)"
   },
   "JSON.stringify(pretty)": {
      "prefix": ["jsp"],
      "body": "JSON.stringify($1, null, 3)"
   },
   "JSON.parse": {
      "prefix": ["jp"],
      "body": "JSON.parse($1)"
   },
   "Object.keys": {
      "prefix": ["obk"],
      "body": "Object.keys($1)"
   },
   "Object.values": {
      "prefix": ["obv"],
      "body": "Object.values($1)"
   },
   "$eq": {
      "prefix": ["eq"],
      "body": "=== "
   },
   "$ne": {
      "prefix": ["ne"],
      "body": "!== "
   },
   "new_Date": {
      "prefix": ["nd"],
      "body": "new Date($1)"
   },
   "let": {
      "prefix": ["let"],
      "body": "let $1: $2 = $3"
   },
   "const": {
      "prefix": ["con"],
      "body": "const $1: $2 = $3"
   },
   "Date.now": {
      "prefix": ["dn"],
      "body": "Date.now()"
   },
   "typeStringObject": {
      "prefix": ["tS"],
      "body": "String"
   },
   "typeNumberObject": {
      "prefix": ["tN"],
      "body": "Number"
   },
   "typeBooleanObject": {
      "prefix": ["tB"],
      "body": "Boolean"
   },
   "typeString": {
      "prefix": ["ts"],
      "body": "string"
   },
   "typeNumber": {
      "prefix": ["tn"],
      "body": "number"
   },
   "typeBoolean": {
      "prefix": ["tb"],
      "body": "boolean"
   },
   "typeVoid": {
      "prefix": ["tv"],
      "body": "void"
   },
   "typePromise": {
      "prefix": ["tp"],
      "body": "Promise"
   },
   "parseInt": {
      "prefix": ["pi"],
      "body": "parseInt($1, 10)"
   },
   "parseFloat": {
      "prefix": ["pf"],
      "body": "parseFloat($1)"
   },
   "parseBoolean": {
      "prefix": ["pb"],
      "body": "Boolean($1)"
   },
   "parseNumber": {
      "prefix": ["pn"],
      "body": "Number($1)"
   },
   "parseStr": {
      "prefix": ["ps"],
      "body": "String($1)"
   },
   "process.env": {
      "prefix": ["pe"],
      "body": "process.env."
   },
   "destructuringObj": {
      "prefix": ["dso"],
      "body": "const { $2 } = $1"
   },
   "destructuringArr": {
      "prefix": ["dsa"],
      "body": "const [$2] = $1"
   },
   "process.env.number": {
      "prefix": ["pen"],
      "body": "Number(process.env.$1 || '${2:unknown}')"
   },
   "process.env.array": {
      "prefix": ["pea"],
      "body": "process.env.$1 || '${2:[]}'"
   },
   "process.env.string": {
      "prefix": ["pes"],
      "body": "process.env.$1 || '${2:unknown}'"
   },
   "interface": {
      "prefix": ["int"],
      "body": [
         "interface ${1:InterfaceName} {",
         "\t$2: $3",
         "}"
      ]
   },
   "type_alias": {
      "prefix": ["ta"],
      "body": "type ${1:TypeName} = $2"
   },
   "try_catch": {
      "prefix": ["tc"],
      "body": [
         "try {",
         "\t$1",
         "} catch (error) {",
         "\tconsole.error($2, error)",
         "}"
      ]
   },
   "promise_then": {
      "prefix": ["pt"],
      "body": [
         "$1.then(($2) => {",
         "\t$3",
         "})"
      ]
   },
   "promise_catch": {
      "prefix": ["pc"],
      "body": [
         "$1.catch((error) => {",
         "\tconsole.error($2, error)",
         "})"
      ]
   },
   "array_map": {
      "prefix": ["am"],
      "body": "$1.map(($2) => $3)"
   },
   "array_filter": {
      "prefix": ["afi"],
      "body": "$1.filter(($2) => $3)"
   },
   "array_reduce": {
      "prefix": ["ar"],
      "body": "$1.reduce(($2, $3) => $4, $5)"
   },
   "array_find": {
      "prefix": ["afn"],
      "body": "$1.find(($2) => $3)"
   },
   "array_some": {
      "prefix": ["as"],
      "body": "$1.some(($2) => $3)"
   },
   "array_every": {
      "prefix": ["ae"],
      "body": "$1.every(($2) => $3)"
   },
   "export_default": {
      "prefix": ["exd"],
      "body": "export default $1"
   },
   "export_named": {
      "prefix": ["ex"],
      "body": "export { $1 }"
   },
   "export_const": {
      "prefix": ["exc"],
      "body": "export const $1 = $2"
   },
   "import_type": {
      "prefix": ["ret"],
      "body": "import type { $2 } from '$1'"
   },
   "generic_function": {
      "prefix": ["gfn"],
      "body": [
         "function $1<$2>($3: $2): $4 {",
         "\t$5",
         "}"
      ]
   },
   "generic_arrow": {
      "prefix": ["gaf"],
      "body": "<$1>($2: $1): $3 => $4"
   },
   "typeof_check": {
      "prefix": ["tof"],
      "body": "typeof $1 === '$2'"
   },
   "instanceof_check": {
      "prefix": ["toi"],
      "body": "$1 instanceof $2"
   },
   "readonly_array": {
      "prefix": ["tro"],
      "body": "readonly $1"
   },
   "partial_type": {
      "prefix": ["tpa"],
      "body": "Partial<$1>"
   },
   "required_type": {
      "prefix": ["tre"],
      "body": "Required<$1>"
   },
   "pick_type": {
      "prefix": ["tpi"],
      "body": "Pick<$1, '$2'>"
   },
   "omit_type": {
      "prefix": ["tom"],
      "body": "Omit<$1, '$2'>"
   },
   "record_type": {
      "prefix": ["tor"],
      "body": "Record<$1, $2>"
   },
   "union_type": {
      "prefix": ["tun"],
      "body": "$1 | $2"
   },
   "intersection_type": {
      "prefix": ["tin"],
      "body": "$1 & $2"
   },
   "class": {
      "prefix": ["cls"],
      "body": [
         "class ${1:ClassName} {",
         "\tconstructor($2) {",
         "\t\t$3",
         "\t}",
         "",
         "\t$4",
         "}"
      ]
   },
   "constructor": {
      "prefix": ["ctor"],
      "body": [
         "constructor($1) {",
         "\t$2",
         "}"
      ]
   },
   "public_method": {
      "prefix": ["pm"],
      "body": [
         "public $1($2): $3 {",
         "\t$4",
         "}"
      ]
   },
   "private_method": {
      "prefix": ["prm"],
      "body": [
         "private $1($2): $3 {",
         "\t$4",
         "}"
      ]
   },
   "getter": {
      "prefix": ["get"],
      "body": [
         "get $1(): $2 {",
         "\treturn $3",
         "}"
      ]
   },
   "setter": {
      "prefix": ["set"],
      "body": [
         "set $1(value: $2) {",
         "\t$3",
         "}"
      ]
   },
   "enum": {
      "prefix": ["en"],
      "body": [
         "enum ${1:EnumName} {",
         "\t${2:VALUE} = '$3',",
         "}"
      ]
   },
   "const_assertion": {
      "prefix": ["ca"],
      "body": "$1 as const"
   },
   "type_assertion": {
      "prefix": ["ast"],
      "body": "$1 as $2"
   },
   "satisfies": {
      "prefix": ["tsa"],
      "body": "$1 satisfies $2"
   },
   "express_route": {
      "prefix": ["route"],
      "body": [
         "app.$1('$2', async (req, res) => {",
         "\ttry {",
         "\t\t$3",
         "\t\tres.json({ success: true })",
         "\t} catch (error) {",
         "\t\tres.status(500).json({ error: error.message })",
         "\t}",
         "})"
      ]
   },
   "middleware": {
      "prefix": ["mw"],
      "body": [
         "const $1 = (req: Request, res: Response, next: NextFunction) => {",
         "\t$2",
         "\tnext()",
         "}"
      ]
   },
   "async_handler": {
      "prefix": ["ah"],
      "body": [
         "const $1 = async (req: Request, res: Response) => {",
         "\ttry {",
         "\t\t$2",
         "\t} catch (error) {",
         "\t\tres.status(500).json({ error: error.message })",
         "\t}",
         "}"
      ]
   },
   "api_response": {
      "prefix": ["api"],
      "body": [
         "res.status($1).json({",
         "\tsuccess: $2,",
         "\tdata: $3,",
         "\tmessage: '$4'",
         "})"
      ]
   },
   "error_response": {
      "prefix": ["err"],
      "body": [
         "res.status($1).json({",
         "\tsuccess: false,",
         "\terror: '$2'",
         "})"
      ]
   },
   "validation_schema": {
      "prefix": ["schema"],
      "body": [
         "const $1Schema = z.object({",
         "\t$2: z.string(),",
         "})"
      ]
   }
}

